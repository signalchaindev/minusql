!function(e){function t(e,t=!0,r={}){if(t||this.verbose&&console.error(`${e} method requires an object argument with a '${e}' property`),0!==Object.keys(r).length)for(const e of Object.keys(r))this.verbose&&console.error(`Error: ${e} is not a valid option`)}const r=e=>null==e||e.constructor===Array&&0===e.length||e.constructor===Object&&0===Object.keys(e).length||e.constructor===String&&0===e.trim().length;function o(e,t,o,s){const n={operation:e,variables:t};return r(o)||(n.requestOptions=o),r(s)||(n.refetchQuery=s),n}function s(e){try{return[JSON.parse(e),null]}catch(t){return[e,t]}}const n=new Map;function i({uri:e,credentials:t,headers:o,requestOptions:s,verbose:n}){this.uri=e,this.requestObject={method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...o},credentials:t||"include"},r(s)||(this.requestObject.requestOptions=s),n&&(this.verbose=n)}i.prototype.query=function({query:e,variables:r,requestOptions:s,...n}){t("query",!!e,n);const i=o(e,r,s);return this.fetchHandler(i)},i.prototype.mutation=function({mutation:e,variables:r,refetchQuery:s=null,requestOptions:n,...i}){t(i),t("mutation",!!e,i);const a=o(e,r,n,s);return this.fetchHandler(a)},i.prototype.fetchHandler=async function({operation:e,variables:t,refetchQuery:r=null,requestOptions:o}){const[n,i]=e.split(" "),[a]=i.split("("),c="query"===n,l={operation:e,operationName:a,operationType:n,variables:t,refetchQuery:r,requestOptions:o,isQuery:c,isMutation:"mutation"===n},u=await this.preCacheHandler(l);if(u)return{...u,error:null};const p={operationName:a,query:e,variables:t},h={...this.requestObject,...o,body:JSON.stringify(p)};let f={};console.log("-----------I'M FETCHING!-----------");const y=await fetch(this.uri,h).catch(e=>{this.verbose&&console.error(e),f={message:e,stack:null,details:null}});if(!y)return{data:null,error:{message:"Request failed"}};const g=await y.json().catch(e=>{this.verbose&&console.error(e),f={message:e,stack:null,details:null}});if(!g)return{data:null,error:{message:f.message}};if(f={message:y.statusText,stack:y,details:g&&g.errors},g||(f.details=[...f.details,{message:"Bad Response: "+(g||null)}]),Object.keys(g).every(e=>!g[e])&&(f.details=[...f.details,{message:"Bad Response: "+(g||null)}]),!y.ok||g&&g.errors&&0!==g.errors.length){const e={};this.verbose&&console.error("Error:",f);for(const t of g.errors){const[r]=s(t.message);if("string"==typeof r)"[object Object]"===r&&this.verbose&&console.error("Error: thrown errors must be of type string"),this.verbose&&console.error("Error: "+r),e.message=r;else for(const[t,o]of Object.entries(r))this.verbose&&console.error(`Error: "${t}: ${o}"`),e[t]=o}return{data:null,error:Object.keys(e).length>0?e:null}}return c&&await this.cache(l),{...g.data,error:y.ok&&null}},i.prototype.cache=function({operation:e,operationName:t,variables:r,refetchQuery:o,requestOptions:s,data:i,updateItem:a,deleteItem:c}){let l;!e||a||c||(l=JSON.stringify({query:o?o.query:t,variables:o?o.variables:r}));const u=n.has(l);console.log("cacheKey:",l),console.log("keyIsCached:",u);const p={operation:e,variables:r,requestOptions:s};if(!u&&!o&&i)return n.set(l,{...i,options:p}),void console.log("\nSET CACHE:",n,"\n");if(u&&l&&!o&&!a&&!c){const e=n.get(l);return console.log("\nGET CACHED ITEM:",n,"\n"),e}if(o){const e=JSON.stringify(o);console.log("refetchKey:",e);const t=n.get(e);return console.log("cs:",t),n.delete(e),this.fetchHandler(p),void console.log("\nREFETCH QUERY:",n,"\n")}if(a){const{data:e,...t}=a,r=JSON.stringify(t),o=n.get(r),s=o&&o.options;return n.set(r,{data:e,options:s}),console.log("\nUPDATE CACHE:",n,"\n"),n}if(c){const e=JSON.stringify(c);return n.has(e)&&n.delete(e),console.log("\nUPDATE CACHE:",n,"\n"),n}return n.size>0?(console.log("\nRETURN CACHE:",n,"\n"),n):void 0},i.prototype.preCacheHandler=async function({operation:e,operationName:t,operationType:r,variables:o,refetchQuery:s=null,requestOptions:n,isMutation:i}){const a={operation:e,operationName:t,operationType:r,variables:o,refetchQuery:s,requestOptions:n};if(i&&s)return await this.cache({refetchQuery:s}),null;const c=await this.cache(a);return console.log("cacheData:",c),c||void 0},e.MinusQL=i,e.gql=function(e,...t){return String.raw({raw:(r=e[0],r.replace(/[\s,]+/g," ").trim())},...t);var r}}({});
